diff -pur expect5.45.4-old/configure.in expect5.45.4/configure.in
--- expect5.45.4-old/configure.in	2018-02-04 11:43:58
+++ expect5.45.4/configure.in	2023-02-18 10:30:19
@@ -133,6 +133,8 @@ AC_CHECK_HEADER(sys/strpty.h,    AC_DEFINE(HAVE_STRPTY
 AC_CHECK_HEADER(sys/ptem.h,      AC_DEFINE(HAVE_SYS_PTEM_H))
 AC_CHECK_HEADER(sys/strredir.h,  AC_DEFINE(HAVE_STRREDIR_H))
 AC_CHECK_HEADER(sys/strpty.h,    AC_DEFINE(HAVE_STRPTY_H))
+AC_CHECK_HEADER(pty.h,           AC_DEFINE(HAVE_PTY_H))
+AC_CHECK_HEADER(util.h,          AC_DEFINE(HAVE_UTIL_H))
 
 AC_MSG_CHECKING([for sys/bsdtypes.h])
 if test "ISC_${ISC}" = "ISC_1"   ;    then
@@ -452,7 +454,11 @@ AC_MSG_CHECKING([for memcpy])
 # because Unixware 2.0 handles it specially and refuses to compile
 # autoconf's automatic test that is a call with no arguments
 AC_MSG_CHECKING([for memcpy])
-AC_TRY_LINK(,[
+AC_TRY_LINK([
+#ifdef HAVE_STRING_H
+#include <string.h>
+#endif
+],[
 char *s1, *s2;
 memcpy(s1,s2,0);
 ],
@@ -469,7 +475,7 @@ AC_TRY_RUN([
 AC_MSG_CHECKING([if WNOHANG requires _POSIX_SOURCE])
 AC_TRY_RUN([
 #include <sys/wait.h>
-main() {
+int main() {
 #ifndef WNOHANG
 	return 0;
 #else
@@ -489,7 +495,7 @@ AC_TRY_RUN([
 AC_TRY_RUN([
 #include <stdio.h>
 #include <sys/wait.h>
-main() {
+int main() {
 #ifdef WNOHANG
 	FILE *fp = fopen("wnohang","w");
 	fprintf(fp,"%d",WNOHANG);
@@ -536,6 +542,13 @@ AC_TRY_RUN([
 AC_MSG_CHECKING([if signals need to be re-armed])
 AC_TRY_RUN([
 #include <signal.h>
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+#ifndef NO_SYS_WAIT_H
+#include <sys/wait.h>
+#endif
+
 #define RETSIGTYPE $retsigtype
 
 int signal_rearms = 0;
@@ -553,7 +566,7 @@ signal_rearms++;
 signal_rearms++;
 }
 
-main()
+int main()
 {
 	signal(SIGINT,parent_sigint_handler);
 
@@ -567,8 +580,9 @@ main()
 
 		wait(&status);
 		unlink("core");
-		exit(signal_rearms);
+		return signal_rearms;
 	}
+	return -1;
 }],
 	AC_MSG_RESULT(yes)
 	AC_DEFINE(REARM_SIG)
@@ -714,10 +728,10 @@ AC_TRY_RUN([
 AC_MSG_CHECKING([for struct sgttyb])
 AC_TRY_RUN([
 #include <sgtty.h>
-main()
+int main()
 {
   struct sgttyb tmp;
-  exit(0);
+  return 0;
 }],
         AC_MSG_RESULT(yes)
         AC_DEFINE(HAVE_SGTTYB)
@@ -738,10 +752,10 @@ if test $mach -eq 0 ; then
   # pty_termios.c is set up to handle pty_termio.
   AC_MSG_CHECKING([for struct termio])
   AC_TRY_RUN([#include <termio.h>
-  main()
+  int main()
   {
     struct termio tmp;
-    exit(0);
+    return 0;
   }],
         AC_DEFINE(HAVE_TERMIO)
         PTY_TYPE=termios
@@ -760,10 +774,10 @@ if test $mach -eq 0 ; then
 #  include <inttypes.h>
 #  endif
 #  include <termios.h>
-  main()
+  int main()
   {
     struct termios tmp;
-    exit(0);
+    return 0;
   }],
         AC_DEFINE(HAVE_TERMIOS)
         PTY_TYPE=termios
@@ -782,7 +796,7 @@ AC_TRY_RUN([
 #include <inttypes.h>
 #endif
 #include <termios.h>
-main() {
+int main() {
 #if defined(TCGETS) || defined(TCGETA)
 	return 0;
 #else
@@ -797,21 +811,18 @@ main() {
 	AC_MSG_ERROR([Expect can't be cross compiled])
 )
 
-AC_MSG_CHECKING([if TIOCGWINSZ in termios.h])
+AC_MSG_CHECKING([if termios.h and sys/ioctl.h may both be included])
 AC_TRY_RUN([
 /* including termios.h on Solaris 5.6 fails unless inttypes.h included */
 #ifdef HAVE_INTTYPES_H
 #include <inttypes.h>
 #endif
 #include <termios.h>
-main() {
-#ifdef TIOCGWINSZ
+#include <sys/ioctl.h>
+int main() {
 	return 0;
-#else
-	return 1;
-#endif
 }],
-	AC_DEFINE(HAVE_TIOCGWINSZ_IN_TERMIOS_H)
+	AC_DEFINE(HAVE_TERMIOS_AND_IOCTL_H_TOGETHER)
 	AC_MSG_RESULT(yes)
 ,
 	AC_MSG_RESULT(no)
@@ -823,7 +834,7 @@ AC_TRY_RUN([
 AC_MSG_CHECKING([for Cray-style ptys])
 SETUID=":"
 AC_TRY_RUN([
-main(){
+int main(){
 #ifdef CRAY
 	return 0;
 #else
@@ -878,12 +889,12 @@ extern int daylight;
 AC_TRY_RUN([
 extern char *tzname[2];
 extern int daylight;
-main()
+int main()
 {
   int *x = &daylight;
   char **y = tzname;
 
-  exit(0);
+  return 0;
 }],
 	AC_DEFINE(HAVE_SV_TIMEZONE)
 	AC_MSG_RESULT(yes),
diff -pur expect5.45.4-old/exp_chan.c expect5.45.4/exp_chan.c
--- expect5.45.4-old/exp_chan.c	2018-02-02 20:15:52
+++ expect5.45.4/exp_chan.c	2023-02-18 10:28:14
@@ -35,6 +35,7 @@
 #include "exp_prog.h"
 #include "exp_command.h"
 #include "exp_log.h"
+#include "exp_event.h"
 #include "tcldbg.h" /* Dbg_StdinMode */
 
 extern int		expSetBlockModeProc _ANSI_ARGS_((int fd, int mode));
diff -pur expect5.45.4-old/exp_clib.c expect5.45.4/exp_clib.c
--- expect5.45.4-old/exp_clib.c	2018-02-02 20:15:52
+++ expect5.45.4/exp_clib.c	2023-02-18 10:28:14
@@ -8,6 +8,7 @@ would appreciate credit if this program or parts of it
 */
 
 #include "expect_cf.h"
+#include "exp_command.h"
 #include <stdio.h>
 #include <setjmp.h>
 #ifdef HAVE_INTTYPES_H
diff -pur expect5.45.4-old/exp_tty.h expect5.45.4/exp_tty.h
--- expect5.45.4-old/exp_tty.h	2018-02-02 20:15:52
+++ expect5.45.4/exp_tty.h	2023-02-18 10:28:14
@@ -19,6 +19,7 @@ int exp_tty_raw_noecho(Tcl_Interp *interp, exp_tty *tt
 void exp_tty_echo(int set);
 void exp_tty_break(Tcl_Interp *interp, int fd);
 int exp_tty_raw_noecho(Tcl_Interp *interp, exp_tty *tty_old, int *was_raw, int *was_echo);
+int exp_tty_cooked_echo(Tcl_Interp *interp, exp_tty *tty_old, int *was_raw, int *was_echo);
 int exp_israw(void);
 int exp_isecho(void);
 
diff -pur expect5.45.4-old/exp_win.c expect5.45.4/exp_win.c
--- expect5.45.4-old/exp_win.c	2018-02-02 20:15:52
+++ expect5.45.4/exp_win.c	2023-02-18 10:28:14
@@ -32,14 +32,10 @@ conflicts with sys/ioctl.h
 
 #ifdef HAVE_TERMIOS
 #  include <termios.h>
+#  ifdef HAVE_TERMIOS_AND_IOCTL_H_TOGETHER
+#    include <sys/ioctl.h>
+#  endif
 #else
-#  include <sys/ioctl.h>
-#endif
-
-/* Sigh.  On AIX 2.3, termios.h exists but does not define TIOCGWINSZ */
-/* Instead, it has to come from ioctl.h.  However, As I said above, this */
-/* can't be cavalierly included on all machines, even when it exists. */
-#if defined(HAVE_TERMIOS) && !defined(HAVE_TIOCGWINSZ_IN_TERMIOS_H)
 #  include <sys/ioctl.h>
 #endif
 
diff -pur expect5.45.4-old/pty_termios.c expect5.45.4/pty_termios.c
--- expect5.45.4-old/pty_termios.c	2018-02-02 20:15:52
+++ expect5.45.4/pty_termios.c	2023-02-18 10:30:10
@@ -77,6 +77,15 @@ with openpty which supports 4000 while ptmx supports 6
 #include <sys/sysmacros.h>
 #endif
 
+#ifdef HAVE_OPENPTY
+#ifdef HAVE_UTIL_H
+#include <util.h>
+#endif
+#ifdef HAVE_PTY_H
+#include <pty.h>
+#endif
+#endif
+
 #ifdef HAVE_PTYTRAP
 #include <sys/ptyio.h>
 #endif
@@ -102,6 +111,7 @@ with openpty which supports 4000 while ptmx supports 6
 #include "exp_tty_in.h"
 #include "exp_rename.h"
 #include "exp_pty.h"
+#include "exp_int.h"
 
 void expDiagLog();
 void expDiagLogPtr();
diff -pur expect5.45.4-old/tclconfig/tcl.m4 expect5.45.4/tclconfig/tcl.m4
--- expect5.45.4-old/tclconfig/tcl.m4	2018-02-04 14:55:43
+++ expect5.45.4/tclconfig/tcl.m4	2023-02-18 10:28:14
@@ -2400,7 +2400,7 @@ AC_DEFUN([TEA_TIME_HANDLER], [
 	AC_TRY_COMPILE([#include <time.h>],
 	    [extern long timezone;
 	    timezone += 1;
-	    exit (0);],
+	    return 0;],
 	    tcl_cv_timezone_long=yes, tcl_cv_timezone_long=no)])
     if test $tcl_cv_timezone_long = yes ; then
 	AC_DEFINE(HAVE_TIMEZONE_VAR, 1, [Should we use the global timezone variable?])
@@ -2412,7 +2412,7 @@ AC_DEFUN([TEA_TIME_HANDLER], [
 	    AC_TRY_COMPILE([#include <time.h>],
 		[extern time_t timezone;
 		timezone += 1;
-		exit (0);],
+		return 0;],
 		tcl_cv_timezone_time=yes, tcl_cv_timezone_time=no)])
 	if test $tcl_cv_timezone_time = yes ; then
 	    AC_DEFINE(HAVE_TIMEZONE_VAR, 1, [Should we use the global timezone variable?])
@@ -2452,17 +2452,17 @@ AC_DEFUN([TEA_BUGGY_STRTOD], [
 		    double value;
 		    value = strtod(infString, &term);
 		    if ((term != infString) && (term[-1] == 0)) {
-			exit(1);
+			return 1;
 		    }
 		    value = strtod(nanString, &term);
 		    if ((term != nanString) && (term[-1] == 0)) {
-			exit(1);
+			return 1;
 		    }
 		    value = strtod(spaceString, &term);
 		    if (term == (spaceString+1)) {
-			exit(1);
+			return 1;
 		    }
-		    exit(0);
+		    return 0;
 		}], tcl_cv_strtod_buggy=ok, tcl_cv_strtod_buggy=buggy,
 		    tcl_cv_strtod_buggy=buggy)])
 	if test "$tcl_cv_strtod_buggy" = buggy; then
